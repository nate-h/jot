#!/bin/bash

jot()(

	# Cd to jot dir, pull any changes and potentially create a new md file.
	set -e
	cd $JOTS_DIR
	POSITIONAL=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case $1 in

			# List jots.
			-l|--list)
				echo "List jots from oldest modified to newest with first line"
				echo "--------------------------------------------------------\n"
				for f in $(ls -tr *.md | grep -v README)
				do
					file_name=$(echo $f | sed -e 's/\.md$//')
					first_line=$(head -n 1 $f)
					printf "%-15s: %s\n" $file_name $first_line
				done
				exit 0;;

			# Delete jot.
			-d|--delete)
				FNAME=$2.md
				if [ -f $FNAME ]; then
					git rm $FNAME -q
					git commit -m "Remove $FNAME" -q
					git push origin master -q
				else
					echo "File $FNAME is not a jot."
					echo "Valid jots: $(get_jots)"
				fi
				exit 0;;

			# Get help.
			-h|--help)
				echo "Jots\n"
				echo 'Use like "jot notes"'
				echo ""
				echo "Additional commands supported are:"
				echo "-l|--list) List jots"
				echo "-d|--delete) Delete a jot"
				echo "-h|--help) View help"
				exit 0;;
			*)
				POSITIONAL+=("$1")
				shift
				;;
		esac
	done

	set -- "${POSITIONAL[@]}" # restore positional parameters


	FNAME=$1.md
	touch $FNAME
	git pull -q

	# Open editor while checking if contents changed.
	TEXT_COPY=$(cat $FNAME)
	$JOT_EDITOR $FNAME
	TEXT_COPY_AFTER=$(cat $FNAME)

	# Push any changes.
	if [ "$TEXT_COPY" != "$TEXT_COPY_AFTER" ]; then
		git add $FNAME
		git commit -m "Updated $FNAME" -q
		git push origin master -q
	fi
)

get_jots()(
	echo $(cd $JOTS_DIR && ls -tr *.md | grep -v README | sed -e 's/\.md$//')
)

# Tab complete jots.
complete -C get_jots jot
